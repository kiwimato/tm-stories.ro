{"ast":null,"code":"import Loader from './Loader';\nimport TMModal from './Modal';\nexport default {\n  name: 'TmMasonry',\n  components: {\n    loader: Loader,\n    tmModal: TMModal\n  },\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      selectedImg: null,\n      showPhotoModal: false\n    };\n  },\n  computed: {\n    computedWidth() {\n      let width;\n      if (this.items.length) {\n        width = this.$refs.container.clientWidth;\n      } else {\n        width = window.innerWidth * 0.9;\n      }\n      return width;\n    }\n  },\n  methods: {\n    closeModal() {\n      this.showPhotoModal = false;\n      document.body.style.overflow = \"auto\";\n    },\n    onPhotoClick(img) {\n      this.selectedImg = img;\n      this.showPhotoModal = true;\n      document.body.style.overflow = \"hidden\";\n    }\n  }\n};","map":{"version":3,"mappings":"AAiCA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAC;IACA;EACA;EACAE;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;QACAC;MACA;QACAA;MACA;MACA;IACA;EACA;EACAC;IACAC;MACA;MACAC;IACA;IACAC;MACA;MACA;MACAD;IACA;EACA;AACA","names":["name","components","loader","tmModal","props","items","type","default","loading","data","selectedImg","showPhotoModal","computed","computedWidth","width","methods","closeModal","document","onPhotoClick"],"sourceRoot":"src/components/generic","sources":["Masonry.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"container\"\n    class=\"masonry\"\n  >\n    <loader v-if=\"loading && !items.length\" />\n    <div\n      class=\"photos-container\"\n      v-if=\"items.length\"\n    >\n      <div\n        v-for=\"(img, i) in items\" :key=\"i\"\n        class=\"photo pointer\"\n        @click=\"onPhotoClick(img)\"\n      >\n        <img \n          :src=\"`data:image/png;base64, ${img}`\"\n        />\n      </div>\n    </div>\n    <loader\n      v-if=\"loading && items.length > 0\"\n      :width=\"computedWidth\"\n    />\n    <tm-modal \n      v-if=\"showPhotoModal\"\n      :img=\"selectedImg\"\n      @close=\"closeModal\"\n    />\n  </div>\n</template>\n\n<script>\nimport Loader from './Loader'\nimport TMModal from './Modal'\n\nexport default {\n  name: 'TmMasonry',\n  components: {\n    loader: Loader,\n    tmModal: TMModal\n  },\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false,\n    }\n  },\n  data() {\n    return {\n      selectedImg: null,\n      showPhotoModal: false\n    }\n  },\n  computed: {\n    computedWidth() {\n      let width;\n      if (this.items.length) {\n        width = this.$refs.container.clientWidth;\n      } else {\n        width = window.innerWidth * 0.9;\n      }\n      return width;\n    }\n  },\n  methods: {\n    closeModal() {\n      this.showPhotoModal = false;\n      document.body.style.overflow = \"auto\";\n    },\n    onPhotoClick(img) {\n      this.selectedImg = img;\n      this.showPhotoModal = true;\n      document.body.style.overflow = \"hidden\";\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.masonry {\n  display: block;\n}\n\n.photos-container {\n  display: grid;\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n\n  .photo {\n    margin: 8px;\n  }\n\n  img {\n    width: 100%;\n    height: 300px;\n    object-fit: cover;\n  }\n}\n\n.no-scroll {\n  overflow: hidden;\n}\n\n@media(max-width: 960px) {\n  .photos-container {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n\n@media(max-width: 768px) {\n  .photos-container {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n}\n\n@media(max-width: 500px) {\n  .photos-container {\n    .photo {\n      margin: 8px;\n    }\n\n    img {\n      width: 100%;\n      height: 150px;\n      object-fit: cover;\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}