{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport urls from '../data/images.json';\nimport axios from 'axios';\nimport Masonry from './generic/Masonry';\nexport default {\n  name: 'Photos',\n  components: {\n    masonry: Masonry\n  },\n  data() {\n    return {\n      imagesPerPage: 12,\n      imgsArr: [],\n      loading: false,\n      page: 0,\n      urls\n    };\n  },\n  watch: {\n    page(val) {\n      this.getData(val);\n    }\n  },\n  created() {\n    window.addEventListener(\"scroll\", this.onScroll);\n    this.urls = urls;\n  },\n  async mounted() {\n    await this.getData(0);\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.onScroll);\n  },\n  methods: {\n    async onScroll() {\n      const scrolled = window.scrollY > 0;\n      if (scrolled) {\n        if (this.imgsArr.length === urls.length) {\n          return;\n        } else {\n          const numberOfPages = Math.round(this.urls.length / this.imagesPerPage);\n          if (this.page < numberOfPages) {\n            this.page = this.page + 1;\n          } else {\n            return;\n          }\n        }\n      } else {\n        return;\n      }\n    },\n    async getData(page) {\n      const promises = [];\n      let startIndex = 0;\n      this.loading = true;\n      let response;\n      if (page > 0) {\n        startIndex = page * this.imagesPerPage;\n      }\n      let endIndex = startIndex + this.imagesPerPage - 1;\n      if (endIndex > this.urls.length - 1) {\n        endIndex = this.urls.length - 1;\n      }\n      for (let i = startIndex; i <= endIndex; i++) {\n        const request = axios.get(`${window.location.origin}${urls[i].url}`, {\n          responseType: 'arraybuffer'\n        });\n        promises.push(request);\n      }\n      try {\n        response = await Promise.all(promises);\n        response.forEach(res => {\n          const image = Buffer.from(res.data, 'binary').toString('base64');\n          this.imgsArr.push(image);\n        });\n      } catch (e) {\n        console.error('There was an error', e);\n        this.loading = false;\n        return;\n      }\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"mappings":";AA+BA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAF;MACA;IACA;EACA;EACAG;IACAC;IACA;EACA;EACA;IACA;EACA;EACAC;IACAD;EACA;EACAE;IACA;MACA;MAEA;QACA;UACA;QACA;UACA;UAEA;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;IACA;MACA;MACA;MACA;MACA;MAEA;QACAC;MACA;MACA;MACA;QACAC;MACA;MAEA;QACA;UACAC;QACA;QACAC;MACA;MAGA;QACAC;QACAA;UACA;UACA;QACA;MACA;QACAC;QACA;QACA;MACA;MAEA;IACA;EACA;AACA","names":["name","components","masonry","data","imagesPerPage","imgsArr","loading","page","urls","watch","created","window","destroyed","methods","startIndex","endIndex","responseType","promises","response","console"],"sourceRoot":"src/components","sources":["Photos.vue"],"sourcesContent":["<template>\n  <div>\n    <div \n      class=\"page-container\"\n    >\n      <div class=\"intro-container\">\n        <div class=\"photo-container\">\n          <div class=\"building-1\" />\n          <div class=\"building-3\" /> \n        </div>\n        <div class=\"intro-text\">\n          <h2 class=\"text-white page-title\">\n            {{ $t('menu.photos')}}\n          </h2>\n        </div>\n        <div\n          class=\"main-image animated avoid-clicks\"\n          key=\"main-image\"\n        />\n      </div>\n      <div class=\"content-container\">\n      <masonry\n        :items=\"imgsArr\"\n        :loading=\"loading\"\n      />\n    </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport urls from '../data/images.json'\nimport axios from 'axios';\nimport Masonry from './generic/Masonry'\n\nexport default {\n  name: 'Photos',\n  components: {\n    masonry: Masonry\n  },\n  data() {\n    return {\n      imagesPerPage: 12,\n      imgsArr: [],\n      loading: false,\n      page: 0,\n      urls\n    }\n  },\n  watch: {\n    page(val) {\n      this.getData(val);\n    }\n  },\n  created() {\n    window.addEventListener(\"scroll\", this.onScroll);\n    this.urls = urls;\n  },\n  async mounted() {\n    await this.getData(0);\n  },\n  destroyed () {\n    window.removeEventListener('scroll', this.onScroll);\n  },\n  methods: {\n    async onScroll() {\n     const scrolled = window.scrollY > 0;\n\n      if (scrolled){\n        if (this.imgsArr.length === urls.length) {\n          return;\n        } else {\n          const numberOfPages = Math.round(this.urls.length / this.imagesPerPage);\n\n          if (this.page < numberOfPages) {\n            this.page = this.page + 1;\n          } else {\n            return;\n          }\n        }\n      } else {\n        return;\n      }\n    },\n    async getData(page) {\n      const promises = [];\n      let startIndex = 0;\n      this.loading = true;\n      let response;\n\n      if (page > 0) {\n        startIndex = page * this.imagesPerPage;\n      }\n      let endIndex = (startIndex + this.imagesPerPage) - 1;\n      if (endIndex > this.urls.length - 1) {\n        endIndex = this.urls.length - 1\n      }\n\n      for(let i = startIndex; i <= endIndex; i++) {\n        const request = axios.get(`${window.location.origin}${urls[i].url}`, {\n          responseType: 'arraybuffer'\n        })\n        promises.push(request);\n      }\n\n      \n      try {\n        response = await Promise.all(promises);\n        response.forEach((res) => {\n          const image = Buffer.from(res.data, 'binary').toString('base64')\n          this.imgsArr.push(image);\n        })\n      } catch(e) {\n        console.error('There was an error', e);\n        this.loading = false;\n        return;\n      }\n      \n      this.loading = false;\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.intro-container {\n  background-color: lighten($anzac, 10%);\n}\n\n.no-scroll {\n  overflow: hidden;\n}\n\n.photo {\n  width: 400px;\n  height: 300px;\n  margin: 12px;\n\n  img {\n    width: 400px;\n    height: 300px;\n  }\n}\n\n.photo-container {\n  display: grid;\n  grid-template-columns: 45% auto 45%;\n  width: inherit;\n  grid-column-start: 1;\n  grid-column-end: 4;\n  grid-row-start: 2;\n\n  .building-1 {\n    background: url('../assets/images/building_1.png') no-repeat top/contain;\n    height: 100vh;\n    opacity: 0.4;\n    grid-column-start: 1;\n  }\n\n  .building-3 {\n    background: url('../assets/images/building_3.png') no-repeat top/contain;\n    height: 90vh;\n    opacity: 0.4;\n    grid-column-start: 3;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}