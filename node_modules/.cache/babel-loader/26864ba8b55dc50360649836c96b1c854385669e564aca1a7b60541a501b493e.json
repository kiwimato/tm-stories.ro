{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport urls from '../data/images.json';\nimport axios from 'axios';\nimport Masonry from './generic/Masonry';\nexport default {\n  name: 'Photos',\n  components: {\n    masonry: Masonry\n  },\n  data() {\n    return {\n      imagesPerPage: 12,\n      imgsArr: [],\n      loading: false,\n      page: 0,\n      urls\n    };\n  },\n  watch: {\n    page(val) {\n      this.getData(val);\n    }\n  },\n  created() {\n    window.addEventListener(\"scroll\", this.onScroll);\n    this.urls = urls;\n  },\n  async mounted() {\n    await this.getData(0);\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.onScroll);\n  },\n  methods: {\n    async onScroll() {\n      const scrolled = window.scrollY > 0;\n      if (scrolled) {\n        if (this.imgsArr.length === urls.length) {\n          return;\n        } else {\n          const numberOfPages = Math.round(this.urls.length / this.imagesPerPage);\n          if (this.page < numberOfPages) {\n            this.page = this.page + 1;\n          } else {\n            return;\n          }\n        }\n      } else {\n        return;\n      }\n    },\n    async getData(page) {\n      const promises = [];\n      let startIndex = 0;\n      this.loading = true;\n      let response;\n      if (page > 0) {\n        startIndex = page * this.imagesPerPage;\n      }\n      let endIndex = startIndex + this.imagesPerPage - 1;\n      if (endIndex > this.urls.length - 1) {\n        endIndex = this.urls.length - 1;\n      }\n      for (let i = startIndex; i <= endIndex; i++) {\n        const request = axios.get(`${window.location.origin}${urls[i].url}`, {\n          responseType: 'arraybuffer'\n        });\n        promises.push(request);\n      }\n      try {\n        response = await Promise.all(promises);\n        response.forEach(res => {\n          const image = Buffer.from(res.data, 'binary').toString('base64');\n          this.imgsArr.push(image);\n        });\n      } catch (e) {\n        console.error('There was an error', e);\n        this.loading = false;\n        return;\n      }\n      this.loading = false;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}